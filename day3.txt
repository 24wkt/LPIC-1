【1】ファイルの管理
[1-1]ファイルの基本操作
~POINT~
・ファイルをコピーするにはcpコマンドを使う。
・mvコマンドは、ファイルの移動やファイル名の変更に使うことができる。
・ファイルを削除するにはrmコマンドを使う。

■ ファイルのコピー
→ ファイルのコピーするには「cp(copy)コマンド」を使います。

【書式】ファイルのコピー
$ cp コピー元ファイル名 コピー先のファイル名
$ cp コピー元ファイル名 コピー先のディレクトリ名

■ ファイルの移動
→ コピーではなく、ファイルの移動をするには「mv(move)コマンド」を使う。

【書式】ファイルの移動
$ mv 移動元ファイル名 移動先ディレクトリ名
$ mv 移動元ファイル名 移動先ファイル名

【書式】ファイル名の変更
$ mv 名称を変更したいファイル名 新しいファイル名

■ ファイルの削除
→ ファイルの削除するには「rm(remove)コマンド」を使う。

【書式】ファイルを削除
$ rm [オプション] ファイル名

rmコマンドを実行した瞬間、ファイルは削除される。
WindowsやmacOSのようにゴミ箱に入るのではなく、削除したファイルは永久に失われる。

[1-2]ディレクトリの基本操作
~POINT~
・ディレクトリを作成するにはmkdirコマンドを使う。
・ディレクトリをコピーするにはcpコマンドに-rオプションが必要。
・ディレクトリを移動するにはオプションなしのmvコマンドを使う。
・ディレクトリを削除するにはrmコマンドに-rオプションが必要。

■ ディレクトリの作成
→ ディレクトリを作成するには「mkdir(make directory)コマンド」を使う。

【書式】ディレクトリを作成する
$ mkdir [オプション] ディレクトリ名

■ ディレクトリのコピーと移動
→ ディレクトリをコピーするときもファイルのコピーと同じく「cpコマンド」を使う。
　 ただし、「-rオプション」を指定しなければいけない。

【例1】topディレクトリを/tmpディレクトリ以下にコピー
$ cp -r top/tmp

【例2】ディレクトリ名の変更
$ mv top new

なお、「treeコマンド」を使うと、ディレクトリの階層構造がツリー状に表示される。

■ ディレクトリに削除
→ ディレクトリを削除するには、「rmコマンド」に「-rコマンド」を指定する必要がある。

【書式】ディレクトリを削除する
$ rm -r ディレクトリ名
※ ディレクトリを削除するrmdir(remov directory)というコマンドもある。
　 ただし、ディレクトリが空でないと、rmdirコマンドでは削除できない。

[1-3]ファイルとディレクトリの圧縮と展開
■ gzipコマンドとgunzipコマンド
→ Linuxで扱われるいくつかの圧縮形式の中で最も使われているのは「GNU Zip(gzip)形式」である。
　 gizp形式のファイルは通常、ファイル名の末尾に「.gz」となる。
　 gzipファイルを圧縮するにはgzipコマンドを使う。

【書式】ファイルを圧縮
$ gzip ファイル名
→ gzipコマンドを実行すると、対象ファイルには自動的に拡張子「.gz」がつけられる。
  また、gzipコマンドを使って圧縮すると、元のファイルは削除され、圧縮されたファイルが作られる。
  gzipコマンドはディレクトリの圧縮はできないl

【書式】ファイルを解凍
$ gunzip 圧縮ファイル名
→ gunzipコマンド解凍すると、自動的に圧縮ファイルは削除され、解凍されたファイルだけが残る。

■ zipコマンドとunzipコマンド
→ WindowsやmacOSではファイルの圧縮にzip形式がよく使われる。
　Linuxでもzipコマンド、unzipコマンドでzip形式を扱うことができる。zipコマンドではファイルだけでなくディレクトリの圧縮もできる。
　
※ Linuxでは元々zip形式は使われていなかったので、Linux以外のOSとファイルのやり取りをするのであれば、
　標準でインストールされるgzipコマンドやbzip2コマンドを使った方がいい。

【書式】ファイルやディレクトリを圧縮
$ zip [-r] 圧縮ファイル名 ファイル名(またはディレクト名)
→ zipコマンドは圧縮後のファイル名も指定する必要があるので注意が必要。
　なお、gzipコマンドとは異なり、元のファイルは削除されない。

圧縮されたファイルやディレクトリを解凍するにはunzipコマンドを使う。
【書式】圧縮されたファイルやディレクトリを解凍する
$ unzip 圧縮ファイル名
→ gunzipコマンドとは異なり、圧縮ファイルは削除されない。

■ tarコマンドとアーカイブ
→ gzipコマンドはディレクトリの圧縮には対応していません。
　ディレクトリ内のファイルやサブディレクトリをディレクトリごとに圧縮するには、まず初めに「tarコマンド」を使って1つのファイルまとめる。
　複数のファイルをまとめたファイルを「アーカイブ」という。
　アーカイブを作成するには、「tarコマンド」で「cvfオプション」を指定する。

【書式】アーカイブを作成
$ tar cvf アーカイブファイル名 ディレクトリ名
→ tarコマンドは「-」を付けなくてもOK
　c : アーカイブの作成
　v : 処理内容の情報出力　※指定しなくてもOK
　f : アーカイブファイル名の指定

tarコマンドで作成したアーカイブファイル名は末尾が「.tar」となるのが一般的。
このファイルをディレクトリを圧縮したことになる。

【例3】archive.tarファイルを圧縮
$ gzip archive.tar
→ ファイル名は「archive.tar.gz」になる。

反対にアーカイブを展開するには「xオプション」を使う。
【書式】アーカイブを展開する
$ tar xvf アーカイブファイル名

【例4】archive.tarファイルを展開
$ tar xvf archive.tar

■ 圧縮アーカイブの作成と展開
→ Linuxのtarコマンドはgzipによる圧縮にも対応していて、tarコマンドだけで圧縮アーカイブの作成や展開できる。

【書式】圧縮アーカイブを作成・削除
$ tar czvf アーカイブファイル名 ディレクトリ名    【作成】
$ tar xzvf アーカイブファイル名                 【展開】

※展開と解凍の違い
展開：圧縮されて小さくなったファイルサイズを元に戻す。（元のファイルサイズに戻す。）
解凍：1つにまとめられた書庫ファイルから複数(1つの場合も含む)のファイルを取り出す。

【tarコマンドの主なコマンド】
オプション            説明
    c         アーカイブを作成する
    x         アーカイブを展開する
    v         詳細を表示する
    f         アーカイブファイルを指定する
    j         bzip2圧縮を利用する
    J         xz圧縮を利用する
    z         gzip圧縮を利用する
→ zオプションを指定すると、gzip圧縮に対応した作成・展開できる。オプションの並び順に、特に決まりはない。

【tarコマンドを使うときの注意点】
・アーカイブの作成時はc、展開時はxオプションを使う。同時には指定してない。
・vオプションは付けなくても構わない。
・gzip圧縮を利用する時はzオプションを使う。

【試験にトライ！】
A) B, D, E

【2】ユーザーとグループ
[2-1]ユーザーとは？
~POINT~
・ユーザーごとに固有のIDとしてユーザーID(UID)が割り当てられている。
・ユーザーには、一般ユーザー、システムユーザー、rootユーザーがある。
・suコマンドを使うとログアウトせずに別のユーザーとして作業ができる。

システムを利用するユーザーはあらかじめLinuxシステムにユーザーアカウントが登録されている必要がある。
ユーザーアカウントはユーザーとパスワードの組み合わせを使って認証を行うことでシステムを利用できるようになる。

■ ユーザー名とユーザーID
ユーザーID(UID): ユーザーには固有のID番号が割り当てられる。これは「idコマンド」で確認できる。

【書式】UIDを確認
$ id [ユーザー名]
→ ユーザー名とUIDの対応は、ユーザー情報が格納されたファイル/etc/passwdに記述されている。

■ ユーザーの種類
【ユーザーの種類】
①管理者ユーザー(root)
→ システム全体を制御する権利を持つ。
　Windowsではadministratorユーザーに相当する。
”ユーザーID”　=> 『0』

②システムユーザー
→ システムプログラムやサーバソフトウェアを実行するために使われる特別なユーザー。
　ログインには利用されない。
”ユーザーID”　=> 『1 ~ 99』 ※100以上のIDが割り当てられる場合もある。

③一般ユーザー
→ システムを利用するためのユーザーでログインして作業をしたり、メールアカウントに利用したりします。
”ユーザーID”　=> 『100以上』

■ rootユーザーの利用
→ rootユーザーはシステムに多大な影響を与えられる権限を持っているため、普段は一般ユーザーで作業し、必要な場合に限り一時的に切り替えて作業を行うようにする。
　このような場合に「su(substitute user)コマンド」を使って一時的にrootユーザーに切り替える。

【書式】一時的にユーザーを切り替える
$ su [-] [ユーザー名]

【例1】rootユーザーに切り替える
$ su -
Password:     ← rootユーザーのパスワードを入力する
#             ← rootユーザーになった。rootに切り替わると「$」から「#」に変わる。

※元のユーザーに戻るには「exit」と入力する。

【注意！】
元のユーザーに戻りたい時は必ず「exit」で実行する。
「suコマンド」は「元のユーザーを待機させて置いて、新たに別のユーザーとして作業を開始するコマンド」と考えましょう。

【例2】suのみでrootユーザーに切り替える
$ su
Password:
#

※これではrootユーザー用の環境に切り替わってません。
・rootユーザー用のコマンドの多くが使えない。
・カレントディレクトリが元のままである。

■ sudoコマンド
→ rootユーザーのパスワードを知らなくてもrootユーザーの権限が必要な操作を実行できる。
　rootパスワードの漏洩リスクを抑えるための「sudoコマンド」

【書式】rootユーザーの権限が必要なコマンドを実行する
$ sudo コマンド

※あらかじめ実行可能なコマンドをユーザーごとに制限することもできるのでsuコマンドを使うよりも安全にシステム管理ができる。

