【1】Linuxの基本操作

[1-1]Linuxのユーザーインターフェース
~POINT~
・LinuxのユーザーインターフェースにはCUIとGUIがある。
・Linuxは基本的にCUIで操作する。
・GUIの実現にはX Windows Systemが使われている。

①GUI（Graphical User Interface）
->マウスを使ってアイコンやメニューなどの視覚的な要素を操作する方式をGUIという。
　WindowsやmacOSなど、最近のOSではGUIでの操作が当たり前。

②CUI（Character-based User Interface）
->キーボードを使って文字情報だけで操作する方式をCUIという。
　Linuxではこちらのユーザーインターフェースが基本となる。

■『X Windows System』
LinuxでGUIを利用するときは、「X Windows System」というLinuxとは別に開発されているソフトウェアが使われる。
また、X Windows System上でデスクトップを実現するウィンドウマネージャとうおばれるソフトウェアが数多くあるので、Linuxのデスクトップは実に多彩。

■CUIを使うメリット

・慣れればGUIよりも素早く操作ができる
・一連の作業を自動化しやすい
・離れた場所にあるコンピュータをネットワーク経由で操作しやすい

->多くのCUI環境では、キーボードによる操作を快適にするための仕掛けが多数用意されている。
　GUIよりもずっと素早く目的の操作を行うことができる。

[1-2]ログインとログアウト
~POINT~
・Linuxシステムを利用するにはログインする必要がある。
・プロンプトはコマンド入力の準備ができることを示す。
・Linuxシステムの利用を終えたらログアウトする。

Linuxは複数の利用者が同時にシステムを利用することができるマルチユーザーシステムなので、他の多くのOSと同じく「ユーザー」の概念がある。
Linuxシステムを利用できるのは、システムにあらかじめアカウントが登録されたユーザーに限定される。

■ログイン
Linuxシステムの利用を開始するには、ログイン作業が必要。
->ログインには、システムに登録されたユーザー名とパスワードが必要になる。
※入力されたパスワードは画面上には表示されない。（これはパスワードを盗み見られるのを防ぐため）

ログインできると以下のようなものが表示されます。
->これを「プロンプト」という。

【例1】プロンプト
[penguin@centos7 ~]$

=プロンプトは「コマンドを受け付ける準備ができています」ということを意味している。
　システムによってプロンプトの表示は様々ですが、「$」の部分はどのディストリビューションでもほぼ共通している。

■管理者ユーザーroot
Linuxには、「root」という名前の管理者アカウントがある。

”管理者アカウントrootができること”
・システムの設定変更
・再起動
・ソフトウェアのインストールや削除 ...etc
->あらゆる管理作業をする権限を持っている。

rootユーザーは「スーパーユーザー」とも呼ばれ、そのほかのユーザーは「一般ユーザー」という。

【例2】rootユーザーでログイン
[root@centos7 ~]#             <-プロンプトが「#」に変わる！

->一般ユーザーでは「$」だった表示が、rootユーザーでは「#」に変わる。

■ログアウト
システムの利用をし終えたら、「ログアウト」を行う。

"ログアウトの方法"
①「exit」コマンドをプロンプトに入力する。
②「Ctrl + D」を押す。

【例3】ログアウトする
$ exit

[1-3]コマンドによる操作
~POINT~
・コマンドを入力してEnterキーを押すとコマンドを実行される。
・コマンドに指示する値を引数という。
・オプションはコマンドの動作を調整する。

【例1】calコマンドの実行例
$ cal
= カレンダーを表示するためのコマンド（calendar）

■引数
コマンドの後ろにスペースを空けて引数を指定することができる。

【例2】2019年のカレンダーを表示
$ cal 2019
-> 2019年のカレンダーが1月から12月まで表示される。

【例3】2020年の8月のカレンダーを表示
$ cal 8 2020
-> 2020年8月のカレンダーが表示される。

★「2020」、「8 2020」のような、コマンドに指示する値のことを「引数」という。
=引数を必ず指定しないといけないものやそうでないもの、あってもなくてもいいものなどがある。

■オプション
コマンドにはオプションを指定できる。
★「オプション」は、コマンドの動作を調整する役割を果たす。
= 一般的なオプションは1文字で表され、「-」に続けて指定する。

【例4】calコマンドに「-m」オプションの例
$ cal -m
= 月曜日から始まるカレンダーを表示する

【例5】
$ cal -m -3
= 月曜から始まるカレンダーを前後の1ヶ月ずつが表示される
->複数のオプションを同時に指定するには、「-m -3」のように区切るか、「-m3」、「-3m」のように続けて指定する。

【書式】コマンドの実行
$ コマンド [オプション] [引数]
※[]は省略可能。オプション→引数の順で指定するのが一般的。

[1-4]マニュアルを使ってみよう
~POINT~
・Linuxにはオンラインマニュアルが用意されている。
・オンラインマニュアルを参照するには「manコマンド」を使う。
・コマンドの簡単な使い方は「--helpオプション」で調べることができる。

■ manコマンド
『manコマンド』
manコマンドでは、Linuxに用意されている数千ものコマンドの詳細な使い方を参照することができる。
= これを「オンラインマニュアル」という(単に「マニュアル」とも呼ばれる。)

【書式】コマンドのマニュアルを表示
$ man コマンド
-> 複数ページ存在する場合はspaceキーで次のページを表示する。
-> manコマンドを終了するにはQキーを押す。

"オンラインマニュアルで調べられるもの"
①コマンドの使い方
②引数やオプションの指定方法
③オプションの意味
④コマンドの出力する内容

■ セクション
『セクション』
= オンラインマニュアルは、コマンドの使い方の他にも、設定ファイルの書式、プログラミングに必要な情報などいくつかに別れている。
　このカテゴリを「セクション」という。

【オンラインマニュアルのセクション】
セクション番号        説明
     1         一般ユーザーコマンド
     5         設定ファイルの書式
     8         システム管理コマンド

【書式】セクションごとのオンラインマニュアルの表示
$ man [セクション番号] コマンド
→ 一番上に表示されている番号がセクション番号「PASSWD(1)」のようなもの

【試験にトライ！】
A) A ◯

■whatis
= オンラインマニュアルにどのようなセクションがあるのかわからない時に「whatisコマンド」を使用すると、
　 オンラインマニュアルの最初の行だけを抜き出して表示してくれる。

【書式】コマンドのマニュアルの先頭を表示
$ whatis passwd

■ --helpオプション
= オンラインマニュアルよりも簡素な説明が表示される。
　 全てのコマンドで使えるわけではないので、ちょっと使い方を確認したいといった用途に便利。

【書式】--helpオプションによるコマンド説明の表示
$ コマンド --help

[1-5]システムの終了と再起動
~POINT~
・システムの終了や再起動には「shutdownコマンド」を使う。
・shutdownコマンドを実行することができるのは「rootユーザー」だけである。

【書式】システムを終了
$ shutdown [オプション] 時間

【shutdownコマンドの主なコマンド】
オプション            説明
   -r         システムの終了後に再起動 (reboot)
   -h         システムを終了して停止する (halt)
   -c         実行中のシャットダウンをキャンセルする (cancel)

【例6】ただちにシステムを停止
$ shutdown -h now

【例7】ただちにシステムを再起動
$ shutdown -r now

【例8】10分後にシステムを再起動
$ shutdown -r +10

【例9】22:30にシステムを再起動
$ shutdown -r 22:30

【2】ファイルとディレクトリ

[2-1]ファイル
~POINT~
・ファイル名は大文字と小文字で区別される。
・ドット「.」で始まる名前のファイルは表示されない。
・ファイルには、通常ファイル、ディレクトリ、リンクファイル、特殊ファイルがある。
・lsコマンドでファイルの一覧ができる。

■ Linuxのファイル名
ここでは大文字と小文字が区別されるので「test.txt」、「Test.txt」、「TEST.TXT」はそれぞれ別のファイルとなる。
また、Linuxには拡張子の概念がない。しかし、利用者がわかりやすいようにも拡張子を用いるのが一般的。
「.」で始まるファイルは「隠しファイル」と呼ばれ、通常の操作では表示されない。

【Linuxのファイル名に問題なく使えるもの】
・アルファベット
・数字
・記号 (アンダーバー「_」, ハイフン「-」, ドット「.」)

■ ファイルの種類
・ 通常ファイル
→ 人間が読めるテキストファイルやデータ、プログラミングが格納される
※ 人間が読むことができないものをバイナリファイルと分類する。

・ ディレクトリ
→ いわゆるファイルに相当するものがディレクトリ。

・リンクファイル
→ファイル名とファイルの実体(内容)を紐付けるリンク。
※ 「シンボリックリンク」と「ハードリンク」がある。

・特殊ファイル
→ デバイスファイルなど

■ ファイルの一覧表示
『lsコマンド』
【書式】ファイルの一覧を表示するコマンド
$ ls [オプション] [ファイル名 または ディレクトリ名]

【例1】-lオプションの例
$ ls -l
→ -lオプションを付けるとファイルの属性情報も合わせて表示される。

-rw-rw-r--. 1 penguin penguin 19 Dec 5 13:07 diary.txt
----------- - ------- ------- -- ----------- ---------
     ①     ②   ③　　　  ④  　⑤      ⑥　　　　　 ⑦

①ファイルモード
②リンク数
③ファイルの所有者
④ファイルの所有グループ
⑤ファイルサイズ(デフォルトだとバイト単位)
⑥最終更新日
⑦ファイル名

ファイルモードの左端の1文字目でファイルの種類が判別できる。
【ファイルの種類】
文字　　　　　　説明
 -         通常ファイル
 d         ディレクトリ
 l         リンクファイル
 c         特殊ファイル(キャラクタデバイスファイル)
 b         特殊ファイル(ブロックデバイスファイル)

[2-2]ディレクトリ
~POINT~
・全てのディレクトリの頂点となるトップディレクトリを「/（ルートパス）ディレクトリ」という。
・ファイルやディレクトリの場所を表すパスには、「相対パス」と「絶対パス」がある。
・相対パスはカレントディレクトリを基点に、絶対パスはルートディレクトリを基点とする。
・ユーザーごとに「/home/ユーザー名」というホームディレクトリが割り当てられている。

『ディレクトリ』：WindowsやmacOSでいうファイルがLinuxでは「ディレクトリ」と呼ばれ、ディレクトリ内のディレクトリを「サブディレクトリ」という。

■ パス
「penguin/home」のような表記のものをパスという。
= ファイルやディレクトリに到達するためのpath(小径)という意味。
→ディレクトリツリーの頂点になるものを「/(ルートディレクトリ)」という。

★Windowsには「ドライブ」という概念があるが、Linuxにはないので全てのディレクトリはルートディレクトリ以下に格納されている。

■ 絶対パスと相対パス
● 絶対パス
「/home/penguin/」
→ ルートディレクトリを基点としてファイルやディレクトリのパスを表す方法

●相対パス
カレントディレクトリがpenguinの場合
「data/images/cat.jpg」
→ カレントディレクトリを基点としてファイルやディレクトリのパスを表す方法

■パスの記述で使うことができる記号
【パスの記述で使用可能な記号】
  記号                説明
.(ドット1文字)      カレントディレクトリ(省略可)
..(ドット2文字)     1つ上のディレクトリ
~(チルダ)          ホームディレクトリ

『ホームディレクトリ』：ユーザーごとに割り当てられるディレクトリのことで、一般的に「/home/ユーザー名」となる。
                    ログインすると、ユーザーのカレントディレクトリはホームディレクトリになる。

【書式】カレントディレクトリを確認するコマンド
$ pwd
→print working directory

[2-3]ファイルの表示とディレクトリ移動
~POINT~
・テキストファイルの内容は「catコマンド」で表示できる。
・大きなテキストファイルの内容は「lessコマンド」で表示する。
・「cdコマンド」で別のディレクトリに移動する。

■ catコマンド
→ テキストファイルの内容を表示するコマンド

【書式】ファイルの内容を表示
$ cat [ファイル名]

【例1】catコマンド
$ cat /etc/hosts

■ lessコマンド
→ catコマンドでは１画面に収まりきらない大きなファイルを表示すると、スクロールができないので
　そのような時にテキストファイルの内容を1ページずつ表示するコマンド。

【書式】テキストファイルの内容を１ページずつ表示
$ less [ファイル名]

【例2】/etc/servicesをlessコマンドで表示する
$ less /etc/services

【lessコマンドの主なキー操作】
キー操作              説明
   ↓             1行下にスクロールする
   ↑             1行上にスクロールする
 space           1画面下方向に進める
Ctrl + B         1画面上方向に進める
   Q             終了

■ cdコマンド
→ カレントディレクトリを移動するときに使うことができる。

【書式】ディレクトリを移動
$ cd [-] [移動先ディレクトリ]
→「cd -」で一つ前の作業ディレクトリに戻ることができる。 Q)時系列的な一つ前なのか？